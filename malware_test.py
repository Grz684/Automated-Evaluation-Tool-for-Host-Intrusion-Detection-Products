# 导入ftplib模块和os模块
import ftplib
import os
import hashlib
import configparser

import paramiko

from virus_database import VirusDatabase


# 需要修改配置文件/etc/vsftpd.conf, 去掉write_enable=YES前面的#
class MalwareTest:
    def __init__(self, ftp_hostname, ftp_username, ftp_password, folder_path, upload_path):
        self.ftp_hostname = ftp_hostname
        self.ftp_username = ftp_username
        self.ftp_password = ftp_password
        self.folder_path = folder_path
        self.upload_path = upload_path

    @staticmethod
    def get_md5(file_path):
        with open(file_path, 'rb') as f:
            data = f.read()
            md5 = hashlib.md5(data).hexdigest()
        return md5

    def rename_files_to_md5(self):
        for root, dirs, files in os.walk(self.folder_path):
            for file in files:
                file_path = os.path.join(root, file)
                file_md5 = self.get_md5(file_path)
                new_file_path = os.path.join(root, file_md5 + os.path.splitext(file)[1])
                os.rename(file_path, new_file_path)
                print(f"Renamed {file_path} to {new_file_path}")

    def upload_malware(self):
        # 创建一个FTP对象
        ftp = ftplib.FTP()

        # 连接到FTP服务器
        ftp.connect(self.ftp_hostname, 21)

        # 登录FTP服务器
        ftp.login(self.ftp_username, self.ftp_password)

        # 获取目录中所有文件和子目录名的列表
        all_names = os.listdir(self.folder_path)

        # 过滤出只有文件的名字
        file_names = [name for name in all_names if os.path.isfile(os.path.join(self.folder_path, name))]

        # 以二进制模式打开所有文件，并创建一个包含多个文件对象的列表
        files = [(name, open(os.path.join(self.folder_path, name), "rb")) for name in file_names]

        # 遍历文件对象列表，依次上传每个文件到"upload"目录
        for file_name, file in files:
            # 改变当前工作目录到"upload"
            ftp.cwd(self.upload_path)
            # 上传文件
            ftp.storbinary("STOR " + file_name, file)

        # 关闭所有文件和FTP连接
        for file_name, file in files:
            file.close()
        ftp.quit()

    def delete_files(self):
        # 创建SSH客户端
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())

        # 连接到远程靶机
        client.connect(ftp_hostname, username=ftp_username, password=ftp_password)

        # 读取本地test文件中的命令
        command = f"rm -rf {self.upload_path}/*"

        # 在远程靶机上执行命令
        stdin, stdout, stderr = client.exec_command(command)

        # 打印命令输出和错误（如果有）
        output = stdout.read().decode('utf-8')
        errors = stderr.read().decode('utf-8')

        print(f"Output:\n{output}")
        print(f"Errors:\n{errors}")

        # 关闭SSH连接
        client.close()


if __name__ == "__main__":
    cf = configparser.ConfigParser()
    cf.read("config.conf", encoding='utf-8')
    ftp_hostname = cf['malwareinfo']['ftp_hostname']
    ftp_username = cf['malwareinfo']['ftp_username']
    ftp_password = cf['malwareinfo']['ftp_password']
    folder_path = cf['malwareinfo']['folder_path']
    upload_path = cf['malwareinfo']['upload_path']
    accessKeyId = cf['malwareinfo']['accessKeyId']
    accessKeySecret = cf['malwareinfo']['accessKeySecret']
    uuid = cf['malwareinfo']['uuid']
    ip = ftp_hostname

    virus_db = VirusDatabase('virus_info.db', accessKeyId, accessKeySecret, uuid)
    malware_test = MalwareTest(ftp_hostname, ftp_username, ftp_password, folder_path, upload_path)

    # 清空上次的测试结果
    virus_db.remove_all_ali_alarms()
    virus_db.remove_all_tencent_alarms()
    virus_db.clear_database()
    malware_test.delete_files()

    # 上传文件
    # malware_test.rename_files_to_md5()
    # malware_test.upload_malware()

    # 初始化数据库
    # virus_db.initial_table(folder_path)

    # 拉取告警数据
    virus_db.fetch_and_insert_ali_data()
    # virus_db.fetch_and_update_tencent_data(ip)
